// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/customers": {
            "post": {
                "description": "Create new customer. This process is not required to make an order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Create new customer",
                "parameters": [
                    {
                        "description": "customer",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Customer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.CustomerResponse"
                        }
                    },
                    "400": {
                        "description": "Customer has required fields"
                    },
                    "409": {
                        "description": "This Customer is already added"
                    }
                }
            }
        },
        "/api/customers/{cpf}": {
            "get": {
                "description": "Get customer by CPF",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Get customer by CPF",
                "parameters": [
                    {
                        "type": "string",
                        "description": "12345678910",
                        "name": "CPF",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.Customer"
                        }
                    },
                    "404": {
                        "description": "Customer not found"
                    }
                }
            }
        },
        "/api/customers/{id}": {
            "put": {
                "description": "Update customer",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Customer"
                ],
                "summary": "Update customer",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "12",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "customer",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Customer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "400": {
                        "description": "Customer has required fields"
                    },
                    "404": {
                        "description": "Customer not found"
                    }
                }
            }
        },
        "/api/orders": {
            "post": {
                "description": "Create new order. To make an order the payment needs to be completed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Create new order",
                "parameters": [
                    {
                        "description": "order",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Order"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Order has required fields"
                    }
                }
            }
        },
        "/api/orders/to-prepare": {
            "get": {
                "description": "Get all orders already payed that needs to be prepared. This endpoint will be used by the kitchen",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Get all orders to prepare",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.OrderResponse"
                            }
                        }
                    }
                }
            }
        },
        "/api/orders/{id}": {
            "get": {
                "description": "Get an order by Id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Get order by Id",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "12",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.OrderResponse"
                        }
                    },
                    "400": {
                        "description": "Order has required fields"
                    }
                }
            }
        },
        "/api/orders/{id}/delivered": {
            "put": {
                "description": "Update an order. This service wil be used by the waiter to close the order informing that user got its order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Update an order to DELIVERED",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "12",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/orders/{id}/done": {
            "put": {
                "description": "Update an order. This service wil be used by the kitchen to notify a customer and the waiter that the order is done",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Update an order to DONE",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "12",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/orders/{id}/not-delivered": {
            "put": {
                "description": "Update an order. This service wil be used by the waiter to close the order informing that user didn't get the order",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Update an order to NOT_DELIVERED",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "12",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/orders/{id}/preparing": {
            "put": {
                "description": "Update an order. This service wil be used by the kitchen to notify a customer that the order is being prepared",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Order"
                ],
                "summary": "Update an order to PREPARING",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "12",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/api/payments": {
            "post": {
                "description": "Create a payment and return its ID. With it, we can proceed with a Order Creation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Create new payment",
                "parameters": [
                    {
                        "description": "payment",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Payment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.PaymentResponse"
                        }
                    },
                    "400": {
                        "description": "Payment has required fields"
                    }
                }
            }
        },
        "/api/payments/type": {
            "get": {
                "description": "Get payment type, like [DEBIT, CREDIT]",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Payment"
                ],
                "summary": "Get payment types",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/api/products": {
            "post": {
                "description": "Create new product",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create new product",
                "parameters": [
                    {
                        "description": "product",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "Product has required fields"
                    },
                    "409": {
                        "description": "This Product is already added"
                    }
                }
            }
        },
        "/api/products/combo": {
            "get": {
                "description": "List all combos with their products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "List all combos",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Combo"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Create new combo of products",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Create new combo",
                "parameters": [
                    {
                        "description": "combo",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.ComboForm"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/domain.ProductResponse"
                        }
                    },
                    "400": {
                        "description": "ComboForm has required fields"
                    },
                    "409": {
                        "description": "This Combo is already added"
                    }
                }
            }
        },
        "/api/products/{category}": {
            "get": {
                "description": "List all products by a category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "List all products by a category",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Lanches",
                        "name": "category",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Product"
                            }
                        }
                    }
                }
            }
        },
        "/api/products/{id}": {
            "put": {
                "description": "Update a product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Update a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "12",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            },
            "delete": {
                "description": "Delete a product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Product"
                ],
                "summary": "Delete a product",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "12",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Combo": {
            "type": "object",
            "properties": {
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.Product"
                    }
                }
            }
        },
        "domain.ComboForm": {
            "type": "object",
            "required": [
                "description",
                "name",
                "price",
                "products"
            ],
            "properties": {
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                },
                "products": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "domain.Customer": {
            "type": "object",
            "required": [
                "cpf",
                "email",
                "name"
            ],
            "properties": {
                "cpf": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.CustomerResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        },
        "domain.Order": {
            "type": "object",
            "required": [
                "orderProducts",
                "paymentId",
                "totalPrice"
            ],
            "properties": {
                "customerId": {
                    "type": "integer"
                },
                "orderProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.OrderProduct"
                    }
                },
                "orderStatus": {
                    "type": "string"
                },
                "paymentId": {
                    "type": "integer"
                },
                "tickerId": {
                    "type": "integer"
                },
                "totalPrice": {
                    "type": "integer"
                }
            }
        },
        "domain.OrderProduct": {
            "type": "object",
            "required": [
                "productId"
            ],
            "properties": {
                "productId": {
                    "type": "integer"
                }
            }
        },
        "domain.OrderProductResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "domain.OrderResponse": {
            "type": "object",
            "properties": {
                "customerName": {
                    "type": "string"
                },
                "orderDate": {
                    "type": "string"
                },
                "orderId": {
                    "type": "integer"
                },
                "orderProducts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.OrderProductResponse"
                    }
                },
                "orderStatus": {
                    "type": "string"
                },
                "tickerId": {
                    "type": "integer"
                }
            }
        },
        "domain.Payment": {
            "type": "object",
            "required": [
                "paymentKind",
                "totalPrice"
            ],
            "properties": {
                "customerId": {
                    "type": "integer"
                },
                "paymentKind": {
                    "type": "string"
                },
                "totalPrice": {
                    "type": "integer"
                }
            }
        },
        "domain.PaymentResponse": {
            "type": "object",
            "properties": {
                "paymentDate": {
                    "type": "string"
                },
                "paymentGatewayId": {
                    "type": "string"
                },
                "paymentId": {
                    "type": "integer"
                }
            }
        },
        "domain.ProducImage": {
            "type": "object",
            "required": [
                "imageUrl"
            ],
            "properties": {
                "imageUrl": {
                    "type": "string"
                }
            }
        },
        "domain.Product": {
            "type": "object",
            "required": [
                "category",
                "description",
                "images",
                "name",
                "price"
            ],
            "properties": {
                "category": {
                    "type": "string"
                },
                "comboProductsIds": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "description": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "images": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/domain.ProducImage"
                    }
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "integer"
                }
            }
        },
        "domain.ProductResponse": {
            "type": "object",
            "properties": {
                "id": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localshot:3210",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Tech1 API Docs",
	Description:      "This is the API for the Tech1 Fiap Project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
