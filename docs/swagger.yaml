basePath: /
definitions:
  domain.Combo:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      products:
        items:
          $ref: '#/definitions/domain.Product'
        type: array
    type: object
  domain.ComboForm:
    properties:
      description:
        type: string
      id:
        type: integer
      name:
        type: string
      price:
        type: integer
      products:
        items:
          type: integer
        type: array
    required:
    - description
    - name
    - price
    - products
    type: object
  domain.Customer:
    properties:
      cpf:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
    required:
    - cpf
    - email
    - name
    type: object
  domain.CustomerResponse:
    properties:
      id:
        type: integer
    type: object
  domain.Order:
    properties:
      customerId:
        type: integer
      orderProducts:
        items:
          $ref: '#/definitions/domain.OrderProduct'
        type: array
      orderStatus:
        type: string
      paymentId:
        type: integer
      ticketNumber:
        type: integer
      totalPrice:
        type: integer
    required:
    - orderProducts
    - paymentId
    - totalPrice
    type: object
  domain.OrderProduct:
    properties:
      productId:
        type: integer
    required:
    - productId
    type: object
  domain.OrderProductResponse:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  domain.OrderResponse:
    properties:
      customerName:
        type: string
      orderDate:
        type: string
      orderId:
        type: integer
      orderProducts:
        items:
          $ref: '#/definitions/domain.OrderProductResponse'
        type: array
      orderStatus:
        type: string
      ticketNumber:
        type: integer
    type: object
  domain.Payment:
    properties:
      customerId:
        type: integer
      paymentType:
        type: string
      totalPrice:
        type: integer
    required:
    - paymentType
    - totalPrice
    type: object
  domain.PaymentResponse:
    properties:
      paymentDate:
        type: string
      paymentGatewayId:
        type: string
      paymentId:
        type: integer
    type: object
  domain.ProducImage:
    properties:
      imageUrl:
        type: string
    required:
    - imageUrl
    type: object
  domain.Product:
    properties:
      category:
        type: string
      comboProductsIds:
        items:
          type: integer
        type: array
      description:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/domain.ProducImage'
        type: array
      name:
        type: string
      price:
        type: integer
    required:
    - category
    - description
    - images
    - name
    - price
    type: object
  domain.ProductResponse:
    properties:
      id:
        type: integer
    type: object
host: localshot:3210
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is the API for the Tech1 Fiap Project.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Tech1 API Docs
  version: "1.0"
paths:
  /api/customers:
    post:
      consumes:
      - application/json
      description: Create new customer. This process is not required to make an order
      parameters:
      - description: customer
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Customer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.CustomerResponse'
        "400":
          description: Customer has required fields
        "409":
          description: This Customer is already added
      summary: Create new customer
      tags:
      - Customer
  /api/customers/{cpf}:
    get:
      consumes:
      - application/json
      description: Get customer by CPF
      parameters:
      - description: "12345678910"
        in: path
        name: CPF
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.Customer'
        "404":
          description: Customer not found
      summary: Get customer by CPF
      tags:
      - Customer
  /api/customers/{id}:
    put:
      consumes:
      - application/json
      description: Update customer
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      - description: customer
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Customer'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Customer has required fields
        "404":
          description: Customer not found
      summary: Update customer
      tags:
      - Customer
  /api/orders:
    post:
      consumes:
      - application/json
      description: |-
        Create new order. To make an order the payment needs to be completed
        A new Ticket will be generated by the Order Date starting from 1
        In the next day the Ticket number will starts from 1 and so on
      parameters:
      - description: order
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Order'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.OrderResponse'
        "400":
          description: Order has required fields
      summary: Create new order
      tags:
      - Order
  /api/orders/{id}:
    get:
      consumes:
      - application/json
      description: Get an order by Id
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.OrderResponse'
        "400":
          description: Order has required fields
      summary: Get order by Id
      tags:
      - Order
  /api/orders/{id}/delivered:
    put:
      consumes:
      - application/json
      description: Update an order. This service wil be used by the waiter to close
        the order informing that user got its order
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Order not found
      summary: Update an order to DELIVERED
      tags:
      - Order
  /api/orders/{id}/done:
    put:
      consumes:
      - application/json
      description: Update an order. This service wil be used by the kitchen to notify
        a customer and the waiter that the order is done
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Order not found
      summary: Update an order to DONE
      tags:
      - Order
  /api/orders/{id}/not-delivered:
    put:
      consumes:
      - application/json
      description: Update an order. This service wil be used by the waiter to close
        the order informing that user didn't get the order
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Order not found
      summary: Update an order to NOT_DELIVERED
      tags:
      - Order
  /api/orders/{id}/preparing:
    put:
      consumes:
      - application/json
      description: Update an order. This service wil be used by the kitchen to notify
        a customer that the order is being prepared
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Order not found
      summary: Update an order to PREPARING
      tags:
      - Order
  /api/orders/status:
    get:
      consumes:
      - application/json
      description: Get all orders status by the waiter and the customer. This endpoint
        will be used by the waiter and customer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.OrderResponse'
            type: array
      summary: Get all orders status different to prepare
      tags:
      - Order
  /api/orders/to-prepare:
    get:
      consumes:
      - application/json
      description: Get all orders already payed that needs to be prepared. This endpoint
        will be used by the kitchen
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.OrderResponse'
            type: array
      summary: Get all orders to prepare
      tags:
      - Order
  /api/payments:
    post:
      consumes:
      - application/json
      description: Create a payment and return its ID. With it, we can proceed with
        a Order Creation
      parameters:
      - description: payment
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Payment'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.PaymentResponse'
        "400":
          description: Payment has required fields
      summary: Create new payment
      tags:
      - Payment
  /api/payments/type:
    get:
      consumes:
      - application/json
      description: Get payment type, like [DEBIT, CREDIT]
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              type: string
            type: array
      summary: Get payment types
      tags:
      - Payment
  /api/products:
    post:
      consumes:
      - application/json
      description: Create new product
      parameters:
      - description: product
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.Product'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ProductResponse'
        "400":
          description: Product has required fields
        "409":
          description: This Product is already added
      summary: Create new product
      tags:
      - Product
  /api/products/{category}:
    get:
      consumes:
      - application/json
      description: List all products by a category
      parameters:
      - description: Lanches
        in: path
        name: category
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Product'
            type: array
      summary: List all products by a category
      tags:
      - Product
  /api/products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product by ID
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a product
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update a product by ID
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Update a product
      tags:
      - Product
  /api/products/combos:
    get:
      consumes:
      - application/json
      description: List all combos with their products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/domain.Combo'
            type: array
      summary: List all combos
      tags:
      - Product
    post:
      consumes:
      - application/json
      description: Create new combo of products
      parameters:
      - description: combo
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/domain.ComboForm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/domain.ProductResponse'
        "400":
          description: ComboForm has required fields
        "409":
          description: This Combo is already added
      summary: Create new combo
      tags:
      - Product
  /api/products/combos/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a combo by ID
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Delete a combo
      tags:
      - Product
    put:
      consumes:
      - application/json
      description: Update a combo by ID
      parameters:
      - description: "12"
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: Update a combo
      tags:
      - Product
swagger: "2.0"
